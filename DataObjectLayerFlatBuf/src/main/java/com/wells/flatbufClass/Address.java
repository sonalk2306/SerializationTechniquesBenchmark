// automatically generated by the FlatBuffers compiler, do not modify

package com.wells.flatbufClass;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class Address extends Table {
  public static Address getRootAsAddress(ByteBuffer _bb) { return getRootAsAddress(_bb, new Address()); }
  public static Address getRootAsAddress(ByteBuffer _bb, Address obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; vtable_start = bb_pos - bb.getInt(bb_pos); vtable_size = bb.getShort(vtable_start); }
  public Address __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public String state() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer stateAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer stateInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  public Building buildings(int j) { return buildings(new Building(), j); }
  public Building buildings(Building obj, int j) { int o = __offset(6); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int buildingsLength() { int o = __offset(6); return o != 0 ? __vector_len(o) : 0; }

  public static int createAddress(FlatBufferBuilder builder,
      int stateOffset,
      int buildingsOffset) {
    builder.startObject(2);
    Address.addBuildings(builder, buildingsOffset);
    Address.addState(builder, stateOffset);
    return Address.endAddress(builder);
  }

  public static void startAddress(FlatBufferBuilder builder) { builder.startObject(2); }
  public static void addState(FlatBufferBuilder builder, int stateOffset) { builder.addOffset(0, stateOffset, 0); }
  public static void addBuildings(FlatBufferBuilder builder, int buildingsOffset) { builder.addOffset(1, buildingsOffset, 0); }
  public static int createBuildingsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startBuildingsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static int endAddress(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
}

