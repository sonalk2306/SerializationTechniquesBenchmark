// automatically generated by the FlatBuffers compiler, do not modify

package com.wells.flatbufClass;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class NestedGroup extends Table {
  public static NestedGroup getRootAsNestedGroup(ByteBuffer _bb) { return getRootAsNestedGroup(_bb, new NestedGroup()); }
  public static NestedGroup getRootAsNestedGroup(ByteBuffer _bb, NestedGroup obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; vtable_start = bb_pos - bb.getInt(bb_pos); vtable_size = bb.getShort(vtable_start); }
  public NestedGroup __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public Person person(int j) { return person(new Person(), j); }
  public Person person(Person obj, int j) { int o = __offset(4); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int personLength() { int o = __offset(4); return o != 0 ? __vector_len(o) : 0; }

  public static int createNestedGroup(FlatBufferBuilder builder,
      int personOffset) {
    builder.startObject(1);
    NestedGroup.addPerson(builder, personOffset);
    return NestedGroup.endNestedGroup(builder);
  }

  public static void startNestedGroup(FlatBufferBuilder builder) { builder.startObject(1); }
  public static void addPerson(FlatBufferBuilder builder, int personOffset) { builder.addOffset(0, personOffset, 0); }
  public static int createPersonVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startPersonVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static int endNestedGroup(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
}

